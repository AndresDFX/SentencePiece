#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Mar 19, 2020 10:01:47 PM -05  platform: Linux

import sys
import emojis

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sentence_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    sentence_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    sentence_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

# Función que obtiene la información dentro de un archivo txt
# @return un String con la información del archivo.
 
def leerArchivo(archivo):
    texto = ""
    with open(archivo, 'rt',encoding='utf8' ) as o:
        texto = o.read()
    return texto
 
# Función que separa la información obtenido del archivo
# @return una lista con la información de los archivos
 
def extraerEmojis(archivo):  
    lista = []
    lista2 =[]
    for t in archivo.split('\n'):
        emoji = t.split(';')[2][78:79]
        lista.append(emoji)  
    lista.pop()
    char_list = [lista[j] for j in range(len(lista)) if ord(lista[j]) in range(65536)]
    return char_list


#Obtener la lista de caracteres unicode
def unicodeEmojis(listaEmojis):
    lista = []
    for t in range(len(listaEmojis)):       
        lista.append(emojis.decode(listaEmojis[t]))
    return lista


text = leerArchivo("emojis_sequence.txt")
listaEmojis = extraerEmojis(text)
listaUnicode = unicodeEmojis(listaEmojis)

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Courier New} -size 10 -weight bold"
        font9 = "-family {Courier New} -size 10"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("853x535+212+131")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(0, 0)
        top.title("Sentence Piece UV")
        top.configure(background="#5b2dd8")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=1.009, relwidth=1.034)
        self.Frame1.configure(relief='flat')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(background="#00ACEE")
        self.Frame1.configure(cursor="fleur")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.066, rely=0.052, height=31, width=455)
        self.Label1.configure(activebackground="#00edc6")
        self.Label1.configure(activeforeground="#ffffff")
        self.Label1.configure(background="#2b54d8")
        self.Label1.configure(font=font10)
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''ENTER THE TEXT YOU WANT TO TOKENIZE''')

        self.Text1 = tk.Text(self.Frame1)
        self.Text1.place(relx=0.066, rely=0.154, relheight=0.398, relwidth=0.357)

        self.Text1.configure(background="white")
        self.Text1.configure(cursor="fleur")
        self.Text1.configure(font="-family {Courier New} -size 10")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.Model_word = tk.Button(self.Frame1)
        self.Model_word.place(relx=0.451, rely=0.204, height=58, width=108)
        self.Model_word.configure(activebackground="#00edc6")
        self.Model_word.configure(activeforeground="#ffffff")
        self.Model_word.configure(command=sentence_support.modelWord)
        self.Model_word.configure(font=font10)
        self.Model_word.configure(foreground="#0c0c0c")
        self.Model_word.configure(text='''Model word''')

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.451, rely=0.356, height=59, width=108)
        self.Button2.configure(activebackground="#00edc6")
        self.Button2.configure(activeforeground="#ffffff")
        self.Button2.configure(cursor="fleur")
        self.Button2.configure(command=sentence_support.modelUser)
        self.Button2.configure(font=font10)
        self.Button2.configure(text='''Model user''')

        self.TSeparator1 = ttk.Separator(self.Frame1)
        self.TSeparator1.place(relx=0.61, rely=0.02, relheight=0.969)
        self.TSeparator1.configure(orient="vertical")

        self.Text2 = tk.Text(self.Frame1)
        self.Text2.place(relx=0.635, rely=0.204, relheight=0.669, relwidth=0.311)

        self.Text2.configure(background="white")
        self.Text2.configure(font="-family {Courier New} -size 10")
        self.Text2.configure(selectbackground="#c4c4c4")
        self.Text2.configure(wrap="word")

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.71, rely=0.052, height=48, width=125)
        self.Label2.configure(activebackground="#00edc6")
        self.Label2.configure(activeforeground="#ffffff")
        self.Label2.configure(background="#2b54d8")
        self.Label2.configure(font=font10)
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(text='''OUTPUT''')

        self.Label1_3 = tk.Label(self.Frame1)
        self.Label1_3.place(relx=0.066, rely=0.576, height=30, width=472)
        self.Label1_3.configure(activebackground="#00edc6")
        self.Label1_3.configure(activeforeground="#ffffff")
        self.Label1_3.configure(cursor="fleur")
        self.Label1_3.configure(font=font10)
        self.Label1_3.configure(text='''Suggest list of emojis''')

        self.Listunicode = tk.Listbox(self.Frame1)
        self.Listunicode.place(relx=0.181, rely=0.667, relheight=0.213
                , relwidth=0.295)
        self.Listunicode.configure(background="white")
        self.Listunicode.configure(cursor="fleur")
        self.Listunicode.configure(font=font9)
        self.Listunicode.insert(0, *listaUnicode)

if __name__ == '__main__':
    vp_start_gui()





